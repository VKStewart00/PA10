[
  {
    "objectID": "Portfolio_Project_P1.html#data-source",
    "href": "Portfolio_Project_P1.html#data-source",
    "title": "Portfolio Project - Part 1",
    "section": "1.1 Data Source",
    "text": "1.1 Data Source\n\nThe dataset I will use is: [Carbon Majors Emissions Data].\nIt comes from: [TidyTuesday, Carbon Majors].\nI retrieved this dataset from [URL]."
  },
  {
    "objectID": "Portfolio_Project_P1.html#description-of-data",
    "href": "Portfolio_Project_P1.html#description-of-data",
    "title": "Portfolio Project - Part 1",
    "section": "1.2 Description of Data",
    "text": "1.2 Description of Data\n\nThe dataset includes [12,551] rows and [7] columns.\nKey variables:\n\nvariable1: [total_emissions]\nvariable2: [parent_entity]\nvariable3: [Production unit]\n(Add more if needed)\n\nData types:\n\n[Categorical, Numerical]\n\nInitial observations:\n\nwith a simple sort I see that a coal company has the most co2 emissions"
  },
  {
    "objectID": "Portfolio_Project_P1.html#research-questions",
    "href": "Portfolio_Project_P1.html#research-questions",
    "title": "Portfolio Project - Part 1",
    "section": "1.3 Research Questions",
    "text": "1.3 Research Questions\n\nQ1: [What year has the most co2 emissions]\nQ2: [What industry has the most co2 emissions]\nQ3: [What country has the most co2 emissions]"
  },
  {
    "objectID": "Portfolio_Project_P1.html#desired-visualizations",
    "href": "Portfolio_Project_P1.html#desired-visualizations",
    "title": "Portfolio Project - Part 1",
    "section": "2.1 Desired Visualizations",
    "text": "2.1 Desired Visualizations\n\nVisualization 1: [line plot]\nVisualization 2: [bar chart]"
  },
  {
    "objectID": "Portfolio_Project_P1.html#what-i-want-to-highlight",
    "href": "Portfolio_Project_P1.html#what-i-want-to-highlight",
    "title": "Portfolio Project - Part 1",
    "section": "2.2 What I Want to Highlight",
    "text": "2.2 What I Want to Highlight\n\nKey Trends or Patterns: [co2 emissions increasing year over year]\nComparison Factors: [year, company, parent type]\nSpecial Formatting Needs: [color]"
  },
  {
    "objectID": "Portfolio_Project_P1.html#missing-data-challenges",
    "href": "Portfolio_Project_P1.html#missing-data-challenges",
    "title": "Portfolio Project - Part 1",
    "section": "2.3 Missing Data & Challenges",
    "text": "2.3 Missing Data & Challenges\n\nAre there missing values? [No]\nWill I need to clean or restructure variables? [Yes, the units are not all equal]\nAre there additional datasets I need to join? [Yes, I may add global temperture]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "pa-10-star-wars-student.html",
    "href": "pa-10-star-wars-student.html",
    "title": "PA 10: Exploring the Star Wars Universe",
    "section": "",
    "text": "This task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "pa-10-star-wars-student.html#goals-for-the-activity",
    "href": "pa-10-star-wars-student.html#goals-for-the-activity",
    "title": "PA 10: Exploring the Star Wars Universe",
    "section": "Goals for the Activity",
    "text": "Goals for the Activity\n\nApply methods of to use lists and iteration (using purrr) to extract data from various non-tabular data sets.\n\nCreate new data sets through the cleaning, organization, and joining of data from various sources\n\nCreate visualizations to explore the data\n\nMay the force be with you!\n\nTHROUGHOUT THE Activity be sure to follow the Style Guide by doing the following:\n\nload the appropriate packages at the beginning of the Rmarkdown\n\nuse proper spacing\n\nname all code chunks\n\ncomment at least once in each code chunk to describe why you made your coding decisions\n\nadd appropriate labels to all graphic axes"
  },
  {
    "objectID": "pa-10-star-wars-student.html#review-extracting-information-from-different-data-sets",
    "href": "pa-10-star-wars-student.html#review-extracting-information-from-different-data-sets",
    "title": "PA 10: Exploring the Star Wars Universe",
    "section": "Review: Extracting Information from Different Data Sets",
    "text": "Review: Extracting Information from Different Data Sets\nHere is information about the fist 7 Star Wars films:\n\nView(sw_films) \n\nWe are going to explore the data contained in several lists similar to this one (and the previously explored sw_people), combining skills from all of our previous R code learning experiences.\nHow do the following two codes compare?\n\nsw_films[[4]][[\"title\"]]\n\n[1] \"Revenge of the Sith\"\n\nsw_films %&gt;% pluck(4,\"title\")\n\n[1] \"Revenge of the Sith\"\n\n\n\nThe first is looking though the dataset and searching for the title in the fourth dataframe.\n\n\nThe second is pulling the title from the fourth dataset.\n\nSuppose we want to pull out just the titles as a character vector, select the correct code (comment out the rest) to perform this action. You may want to run each line of code one at a time (remember Ctrl + Enter for Windows with your cursor on that line of code).\n\n#comment out the incorrect codes\n## 'sw_films %&gt;% map(\"title\")\nsw_films %&gt;% map_chr(\"title\")\n\n[1] \"A New Hope\"              \"Attack of the Clones\"   \n[3] \"The Phantom Menace\"      \"Revenge of the Sith\"    \n[5] \"Return of the Jedi\"      \"The Empire Strikes Back\"\n[7] \"The Force Awakens\"      \n\n## 'sw_films %&gt;% map_dfc(\"title\")\n\nSuppose we want to apply a function to count the number of specific kinds of ships and vehicles in our data\nNotice that for each film, the “starships” vector contains links to information on those starships (though note this data is out of date and should be linked at swapi.dev, not swapi.co).\n\nsw_films[[1]][[\"starships\"]]\n\n[1] \"http://swapi.co/api/starships/2/\"  \"http://swapi.co/api/starships/3/\" \n[3] \"http://swapi.co/api/starships/5/\"  \"http://swapi.co/api/starships/9/\" \n[5] \"http://swapi.co/api/starships/10/\" \"http://swapi.co/api/starships/11/\"\n[7] \"http://swapi.co/api/starships/12/\" \"http://swapi.co/api/starships/13/\"\n\n\nSo if we can count the number of webpage links that would tell us the number of starships that appear in that movie. Here are three different ways to count the number of urls under starships. Can you think of another? (it is ok if you can’t). Compare and contrast how the three codes work differently to do the same thing.\n\nsw_films %&gt;% map(., \"starships\")%&gt;% map_dbl(~length(.))\n\n[1]  8  9  5 12 12  9  2\n\nmap_dbl(sw_films, ~length(.x$starships))\n\n[1]  8  9  5 12 12  9  2\n\nsw_films %&gt;% map_dbl(., ~length(.x$starships))\n\n[1]  8  9  5 12 12  9  2\n\n## Yes we could\nsw_films %&gt;% map_int(., ~length(.x$starships))\n\n[1]  8  9  5 12 12  9  2\n\n\n\nThe first line looks at all values under ‘starship’ across the dataset, then pulls the length\n\n\nThe second, loads in all the values then pulls starship values and lengths.\n\n\nThe third, same as above but the df is piped in."
  },
  {
    "objectID": "pa-10-star-wars-student.html#part-1-evaluating-hyperdrive-in-the-star-wars-episodes",
    "href": "pa-10-star-wars-student.html#part-1-evaluating-hyperdrive-in-the-star-wars-episodes",
    "title": "PA 10: Exploring the Star Wars Universe",
    "section": "Part 1: Evaluating Hyperdrive in the Star Wars Episodes",
    "text": "Part 1: Evaluating Hyperdrive in the Star Wars Episodes\nWe will use the third method from the previous section to extract out the information we want from sw_films. For each row, specify if we should use a regular map(), map_dbl(), or map_chr().\nNOTE Sometimes code like this gets a little finicky in R if you try to run it with Ctrl + Enter. Instead, use the code chunk green arrow to run the whole code chunk or highlight all of the code and then use the shortcut to run it.\n\nsw_ships_1 &lt;- sw_films %&gt;% {\n  tibble(\n    title = map_chr(., \"title\"), #character\n    episode = map_dbl(., \"episode_id\"), #numeric\n    starships = map_dbl(., ~length(.x$starships)), #numeric\n    vehicles = map_dbl(., ~length(.x$vehicles)), #numeric\n    planets = map_dbl(., ~length(.x$planets)) #numeric\n  )}\nsw_ships_1\n\n# A tibble: 7 × 5\n  title                   episode starships vehicles planets\n  &lt;chr&gt;                     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 A New Hope                    4         8        4       3\n2 Attack of the Clones          2         9       11       5\n3 The Phantom Menace            1         5        7       3\n4 Revenge of the Sith           3        12       13      13\n5 Return of the Jedi            6        12        8       5\n6 The Empire Strikes Back       5         9        6       4\n7 The Force Awakens             7         2        0       1\n\n\nLet’s do a bit more data cleaning to 1) assign the Trilogy classification to each episode, 2) calculate the total number of starships (which have hyperdrive) and vehicles (which do not have hyperdrive), and 3) calculate the proportion of total ships that have hyperdrive. Fill in the missing codes.\n\nsw_ships &lt;- sw_ships_1 %&gt;%  \n  #create a new variable called trilogy\n  mutate(trilogy = case_when(episode %in% 1:3 ~ trilogies[1],\n                             episode %in% 4:6 ~ trilogies[2],\n                             episode %in% 7 ~ trilogies[3])) %&gt;% \n  #create a new variable called total_ships which adds vehicles and starships together\n  mutate(total_ships = vehicles + starships) %&gt;%  \n  #create a new variable called prop that calculate the percent hyperdrive\n  mutate(prop = starships / total_ships * 100) \n\nsw_ships\n\n# A tibble: 7 × 8\n  title             episode starships vehicles planets trilogy total_ships  prop\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;         &lt;dbl&gt; &lt;dbl&gt;\n1 A New Hope              4         8        4       3 Origin…          12  66.7\n2 Attack of the Cl…       2         9       11       5 Preque…          20  45  \n3 The Phantom Mena…       1         5        7       3 Preque…          12  41.7\n4 Revenge of the S…       3        12       13      13 Preque…          25  48  \n5 Return of the Je…       6        12        8       5 Origin…          20  60  \n6 The Empire Strik…       5         9        6       4 Origin…          15  60  \n7 The Force Awakens       7         2        0       1 Sequel…           2 100  \n\n\n\nHyperdrive Use Across Films\nNow, let’s make a plot examining how often hyperdrive ships appear in each episode. Fill in the blanks withe appropriate functions.\n\nsw_ships %&gt;% \n  #be sure to order titles by order/episode\n  ggplot(aes(y = fct_reorder(title, desc(episode)), \n             x = prop)) + \n  #we want bars but our data is already summarized!\n  geom_col(aes(fill = trilogy)) + \n  labs(\n    title = \"The Rise of Hyperdrive\",\n    subtitle = \"Percentage of Ships with Hyperdrive Capability\"\n  ) +\n  #you may need to install `scales` package if you haven't already\n  scale_x_continuous(labels = scales::label_percent(scale = 1)) +\n  theme_minimal() +\n  #what aesthetic do we modify to change the bar color\n  scale_color_viridis_d(end = 0.8) +\n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position = \"bottom\",\n        legend.title = element_blank())\n\n\n\n\n\n\n\n\n\nCanvas Quiz Question 1\nWhich movie has the second highest percentage of Hyperdrive ships?\n\nA New Hope\n\n\n\n\n\nHyperdrive Prevalence within the Universe\nWe can also look at a plot to see if there is a correlation between the total number of ships and the number with hyperdrive (starships). Fill in the blanks withe appropriate functions.\n\nsw_ships %&gt;% \n  ggplot(aes(x = total_ships, \n             y = starships)) +\n  #make points\n  geom_point(aes(color = trilogy)) +\n  #fit a model\n  geom_smooth(method = \"lm\") +\n  #what does geom_text() do?\n  geom_text(aes(label = title), \n            vjust = -1, \n            hjust = \"inward\", \n            size = 2.75) +\n  labs(title = \"Hyperdrive Correlations\",\n       subtitle = \"The Number of Ships with Hyperdrive vs Total Ships\") +\n  theme_minimal() +\n  #what aesthetic do we want to modify the color of points?\n  scale_color_viridis_d(end = 0.8) +\n  theme(axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position = \"bottom\",\n        legend.title = element_blank()) \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nCanvas Quiz Question 2\nWhat do you notice about the use of hyperdrive type vehicles in the episodes?\n\nThe rate of hyperdrive ships increase over time."
  },
  {
    "objectID": "pa-10-star-wars-student.html#part-2-the-physical-features-of-star-wars-characters",
    "href": "pa-10-star-wars-student.html#part-2-the-physical-features-of-star-wars-characters",
    "title": "PA 10: Exploring the Star Wars Universe",
    "section": "Part 2: The Physical Features of Star Wars Characters",
    "text": "Part 2: The Physical Features of Star Wars Characters\nRecall the data for “people” in Star Wars:\n\nView(sw_people)\n\nWe want to extract out name, height, and mass as character vectors (for now, we have to deal with some issues in height and weight later to change them into double type vectors) and keep films as a list for now. Fill in the correct map type functions for each one.\n\nsw_peeps &lt;- sw_people %&gt;%  {\n  tibble(\n    name = map_chr(., \"name\"),  #character\n    height = map_chr(., \"height\"), #character\n    mass = map_chr(., \"mass\"), #character\n    films = map(., \"films\") #list\n  )}\nsw_peeps\n\n# A tibble: 87 × 4\n   name               height mass  films    \n   &lt;chr&gt;              &lt;chr&gt;  &lt;chr&gt; &lt;list&gt;   \n 1 Luke Skywalker     172    77    &lt;chr [5]&gt;\n 2 C-3PO              167    75    &lt;chr [6]&gt;\n 3 R2-D2              96     32    &lt;chr [7]&gt;\n 4 Darth Vader        202    136   &lt;chr [4]&gt;\n 5 Leia Organa        150    49    &lt;chr [5]&gt;\n 6 Owen Lars          178    120   &lt;chr [3]&gt;\n 7 Beru Whitesun lars 165    75    &lt;chr [3]&gt;\n 8 R5-D4              97     32    &lt;chr [1]&gt;\n 9 Biggs Darklighter  183    84    &lt;chr [1]&gt;\n10 Obi-Wan Kenobi     182    77    &lt;chr [6]&gt;\n# ℹ 77 more rows\n\n\nNotice that the films column contains lists of urls for each film reference. Let’s pull out that same information from the sw_films data to have the title of the episode and the url as a character vector, and the episode number as a numeric value. Fill in the correct map type functions.\n\nfilm_names &lt;- sw_films %&gt;% {\n  tibble(\n    episode_id = map_dbl(., \"episode_id\"), #double\n    episode_name = map_chr(., \"title\"), #character\n    url = map_chr(., \"url\") #character\n  )}\nfilm_names\n\n# A tibble: 7 × 3\n  episode_id episode_name            url                         \n       &lt;dbl&gt; &lt;chr&gt;                   &lt;chr&gt;                       \n1          4 A New Hope              http://swapi.co/api/films/1/\n2          2 Attack of the Clones    http://swapi.co/api/films/5/\n3          1 The Phantom Menace      http://swapi.co/api/films/4/\n4          3 Revenge of the Sith     http://swapi.co/api/films/6/\n5          6 Return of the Jedi      http://swapi.co/api/films/3/\n6          5 The Empire Strikes Back http://swapi.co/api/films/2/\n7          7 The Force Awakens       http://swapi.co/api/films/7/\n\n\n\nNow we can finish cleaning up our data by doing the following:\n\nturn height and mass into numeric vectors;\n\nmatch the films/urls to their episode_names and assign that back to sw_peeps.\n\n\nsw_peeps2 &lt;- sw_peeps %&gt;% \n  #use a function from readr to extract the numbers and replace \"unknown\" with na\n  mutate(height = parse_double(height, na = \"unknown\"),\n         mass = parse_double(mass, na = \"unknown\")) %&gt;%\n  #unnest the lists in films\n  unnest(cols = c(\"films\")) %&gt;% \n  #join the film data with episodes names to the people data\n  left_join(film_names, by = c(\"films\" = \"url\")) %&gt;% \n  #remove the `films` url from the data frame\n  select(-films) %&gt;% \n  #add the variable trilogy\n  mutate(trilogy = case_when(episode_id %in% 1:3 ~ trilogies[1],\n                           episode_id %in% 4:6 ~ trilogies[2],\n                           episode_id %in% 7   ~ trilogies[3]))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `mass = parse_double(mass, na = \"unknown\")`.\nCaused by warning:\n! 1 parsing failure.\nrow col               expected actual\n 16  -- no trailing characters  1,358\n\nsw_peeps2\n\n# A tibble: 173 × 6\n   name           height  mass episode_id episode_name            trilogy       \n   &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;                   &lt;fct&gt;         \n 1 Luke Skywalker    172    77          3 Revenge of the Sith     Prequels: Epi…\n 2 Luke Skywalker    172    77          6 Return of the Jedi      Originals: Ep…\n 3 Luke Skywalker    172    77          5 The Empire Strikes Back Originals: Ep…\n 4 Luke Skywalker    172    77          4 A New Hope              Originals: Ep…\n 5 Luke Skywalker    172    77          7 The Force Awakens       Sequels: Epis…\n 6 C-3PO             167    75          2 Attack of the Clones    Prequels: Epi…\n 7 C-3PO             167    75          1 The Phantom Menace      Prequels: Epi…\n 8 C-3PO             167    75          3 Revenge of the Sith     Prequels: Epi…\n 9 C-3PO             167    75          6 Return of the Jedi      Originals: Ep…\n10 C-3PO             167    75          5 The Empire Strikes Back Originals: Ep…\n# ℹ 163 more rows\n\n\n\nSize of Characters in the Star Wars Universe\nWe can now create a plot of height and mass by trilogy group to see if the physique of characters differed across Trilogies (keeping in mind the third set of Trilogies is incomplete in this data set).\n\nsw_peeps2 %&gt;% \n  filter(name != \"Jabba Desilijic Tiure\") %&gt;% #major outlier removed\n  #map the correct aesthetics\n  ggplot(aes(x = height, \n             y = mass, \n             color = trilogy))+\n  geom_point(position = \"jitter\") +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Height of Character (cm)\",\n       y = \"Mass of Character (kg)\",\n       color = \"Trilogy Group\",\n       title = \"Character Characteristics in Star Wars\") +\n  theme_minimal() +\n  scale_color_viridis_d(end = 0.8) \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 36 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 36 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nCanvas Quiz Question 3\nWrite some code to identify who is is the heaviest (look at the graph to help guide this) Star Wars character (excluding Jabba Desilijic Tiure).\n\nsw_peeps2 %&gt;% \n  filter(name != \"Jabba Desilijic Tiure\") %&gt;% #major outlier removed\n  #map the correct aesthetics\n  ggplot(aes(x = height, \n             y = mass, \n             color = trilogy))+\n  geom_point(position = \"jitter\") +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(x = \"Height of Character (cm)\",\n       y = \"Mass of Character (kg)\",\n       color = \"Trilogy Group\",\n       title = \"Character Characteristics in Star Wars\") +\n  theme_minimal() +\n  scale_color_viridis_d(end = 0.8)+\n  #what does geom_text() do?\n  geom_text(aes(label = name), \n            vjust = -1, \n            hjust = \"inward\", \n            size = 2)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 36 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 36 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 36 rows containing missing values or values outside the scale range\n(`geom_text()`).\n\n\n\n\n\n\n\n\n\n\nGrievous\n\nREMEMBER TO RENDER YOUR FINAL DOCUMENT"
  },
  {
    "objectID": "pa-10-star-wars-student.html#optional-challenge-problem",
    "href": "pa-10-star-wars-student.html#optional-challenge-problem",
    "title": "PA 10: Exploring the Star Wars Universe",
    "section": "OPTIONAL CHALLENGE PROBLEM",
    "text": "OPTIONAL CHALLENGE PROBLEM\nYour professor wants to use purrr to try and generate a height and mass scatterplot for each episode, but I don’t want to type out all that code. Here is where I got so far, but I am not convince this is the most sophisticated or effective way to do this. Do some research and see if you can find a way to put this process into production!\n\nplots_sw &lt;- sw_peeps %&gt;% \n  nest(data = !episode_name) %&gt;% \n  mutate(plot = map(data, ~ggplot(., aes(y=mass, x=height)) + \n                      geom_point() + \n                      geom_smooth(method = \"lm\", se = FALSE) + \n                      labs(title = paste0(episode_name))))\n\nError in `nest()`:\n! In expression named `data`:\nCaused by error:\n! Can't select columns that don't exist.\n✖ Column `episode_name` doesn't exist.\n\n\n\nprint(plots_sw$plot)\n\nError: object 'plots_sw' not found"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Portfolio",
    "section": "",
    "text": "Welcome to my portfolio site. Here you’ll find my work on data analysis projects, including visualizations and insights.\n\nView my project: Portfolio_Project_Part 1\nCleaning my data dataWork"
  },
  {
    "objectID": "index.html#hello",
    "href": "index.html#hello",
    "title": "Welcome to My Portfolio",
    "section": "",
    "text": "Welcome to my portfolio site. Here you’ll find my work on data analysis projects, including visualizations and insights.\n\nView my project: Portfolio_Project_Part 1\nCleaning my data dataWork"
  },
  {
    "objectID": "dataWork.html",
    "href": "dataWork.html",
    "title": "DataPrep",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n# Option 1: tidytuesdayR package \n## install.packages(\"tidytuesdayR\")\n\ntuesdata &lt;- tidytuesdayR::tt_load('2024-05-21')\n\n---- Compiling #TidyTuesday Information for 2024-05-21 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"emissions.csv\"\n\n## OR\ntuesdata &lt;- tidytuesdayR::tt_load(2024, week = 21)\n\n---- Compiling #TidyTuesday Information for 2024-05-21 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"emissions.csv\"\n\nemissions &lt;- tuesdata$emissions\n\n\ncolorsVanLikes &lt;- c(\n  \"dodgerblue2\", \n  \"#E31A1C\", \n  \"green4\",\n  \"#6A3D9A\", \n  \"skyblue2\", \n  \"#FB9A99\", \n  \"#CAB2D6\",\n  \"#FDBF6F\", \n  \"maroon\", \n  \"orchid1\", \n  \"deeppink1\", \n  \"blue1\",\n  \"steelblue4\",\n  \"darkturquoise\", \n  \"green1\", \n  \"darkorange4\",\n  \"brown\",\n  \"cyan\",\n  \"cyan4\",\n  \"coral\",\n  \"darkgreen\",\n  \"blue\",\n  \"red4\",\n  \"green4\"\n)\n\n\nemissionsCleanParent &lt;- emissions |&gt;\n  filter( commodity == \"Oil & NGL\",\n          year &gt;= 1970\n          )|&gt;\n  select( -c( parent_type, \n              production_value, \n              production_unit\n              ))|&gt;\n  mutate(total = as.numeric(total_emissions_MtCO2e)) |&gt;\n  group_by(parent_entity)|&gt;\n  mutate(avg_emissions = mean(total_emissions_MtCO2e))|&gt;\n  filter( avg_emissions &gt;= 300)|&gt;\n  ungroup()\n\nemissionsCleanCommodity &lt;- emissions |&gt;\n  filter( year &gt;= 1970\n          )|&gt;\n  select( -c( parent_type, \n              production_value, \n              production_unit\n              ))|&gt;\n  mutate(total = as.numeric(total_emissions_MtCO2e)) |&gt;\n  group_by(year, commodity)|&gt;\n  mutate(avg_emissions = mean(total_emissions_MtCO2e))|&gt;\n  filter( avg_emissions &gt;= 0)|&gt;\n  ungroup()\n\n\nemissionsCleanParent|&gt;\n  ggplot( aes( x = year,\n               y = total_emissions_MtCO2e,\n               group = parent_entity,\n               color = parent_entity\n               ))+\n  theme_minimal()+\n  scale_color_manual(values = colorsVanLikes)+\n  geom_line()\n\n\n\n\n\n\n\nemissionsCleanCommodity|&gt;\n  ggplot( aes( x = year,\n               y = avg_emissions,\n               group = commodity,\n               color = commodity\n               ))+\n  theme_minimal()+\n  scale_color_manual(values = colorsVanLikes)+\n  geom_line()"
  }
]